function [RIndex EndIndex]=srsplit(mode, label, ratio, th)%==========================================================================% To extract reduced set for classification or regression, stratified over %   (1) classes, or slices of sorted responses; and%   (2) cross-validation folds, if applicable.%--------------------------------------------------------------------------% Inputs:% mode            [1 x 1] : task category {'class', 'reg'}% label           [m x 1] : training data label or response% ratio           [1 x 1] : ratio of reduced set size to the full data size %                           if ratio >=2, it represents the reduced set size % th              [1 x 1] : number of folds in cross-validation%--------------------------------------------------------------------------% Outputs:% For SVM% RIndex         [th, ?] : the ith row records extracted indices of%                          reduced set for the ith cross-validation fold%                          of all classes%% EndIndex       [? x z] : the end index of each class in a cross-validation fold%% For SVR% RIndex         [th, ?] : the ith row records extracted indices of%                           reduced set for the ith cross-validation fold%==========================================================================if(~exist('th', 'var'))    th =1;endRows=length(label);if(strcmpi(mode, 'class'))    % classification     class = unique(label);    Num_label = length(class);    EndIndex = zeros(Num_label+1,1);    RIndex = [];    if (ratio >=2 )        for i = 1 : Num_label            Temp_Index = find(label==class(i));            %Temp_Rows = length(Temp_Index);            RIndex = [RIndex ; Temp_Index(1:ratio)];            EndIndex(i+1) = EndIndex(i)+ratio;        end    else        for i = 1 : Num_label            Temp_Index = find(label==class(i));            Temp_Rows = length(Temp_Index);            Temp_Size = fix(Temp_Rows*ratio);            if (Temp_Size==0)                Temp_Size=1;            end            Temp_Index = [Temp_Index ; Temp_Index];            Temp=[];            for j = 1 : th                Temp(j,:) = Temp_Index((j-1)*Temp_Size+1 : j*Temp_Size);            end            RIndex = [RIndex Temp];            EndIndex(i+1) = EndIndex(i)+Temp_Size;        end    endelseif(strcmpi(mode, 'reg'))    % regression    [SLabel, SIndex]=sort(label);    clear SLabel;        size=fix(Rows*ratio);% set the number of slices    num=fix(Rows/size);% size of each slice,                        % there might be some left-out elements for a partial slice    boxes=zeros(size, num);     for i=1: size        base=(i-1)*num;        if(i<size)            boxes(i, :)=base + [1:num];        else            % insure that elements from the last partial slice get a chance            % to enter the reduced set                    tmp=base + [1:Rows-(num*(size-1))];            boxes(i, :)=tmp(1: num);                    end    end        RIndex=zeros(num, size);     for i=1: num        RIndex(i, :)=SIndex(boxes(:, i))'; % pick one index from each slice within each CV-fold    end    RIndex=RIndex(1:th, :);else    error([mode, ', unknown!!']);end